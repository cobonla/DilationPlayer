let __dp={pad:function(n,width,z){z=z||'0';n=n+'';return n.length>=width?n:new Array(width-n.length+1).join(z)+n},parseTime:function(times){let hours=Math.floor(times/3600);let minutes=Math.floor((times-hours*3600)/60);let seconds=Math.floor(times-(minutes*60+hours*3600));let format=(hours>0?(this.pad(hours,2)+':'):'')+this.pad(minutes,2)+':'+this.pad(seconds,2);return format},node:function(element){return new DPNode(element)},ready:function(call){this.node(window).listen('load',call)}};__dp.defaultConfig={elements:{object:null,container:'.dp',video:'.dp-video',audio:'.dp-audio',logo:'.dp-logo',progress:'.dp-progress',progressLoading:'.dp-progress .dp-loading',progressPlaying:'.dp-progress .dp-playing',progressHoverTooltipText:'.dp-progress-tooltip-text',progressHoverTooltipImage:'.dp-progress-tooltip-image',control:'.dp-control',button:'.dp-button',controlPlayPause:'.dp-btn-play',controlFullScreen:'.dp-btn-fullscreen',controlLargeScreen:'.dp-btn-largescreen',controlVolume:'.dp-btn-volume',controlVolumeTooltip:'.dp-volume-tooltip',controlVolumeRange:'.dp-volume-range',controlTimer:'.dp-timer',modal:'.dp-modal',loaderModal:'.dp-modal-loader',loaderModalIcon:'.dp-modal-loader-icon',playerModal:'.dp-modal-player',playerModalIcon:'.dp-modal-player-icon',menu:'.dp-menu',menuList:'.dp-menu-list',menuItem:'.dp-menu-item',menuItemLoop:'.dp-menu-item-loop',menuItemCopyUrl:'.dp-menu-item-copy-url',ads:'.dp-ads',adsItem:'.dp-ads .dp-ads-item',adsContent:'.dp-ads .dp-ads-content',adsClose:'.dp-ads .dp-ads-close',},icons:{loaderModal:'<i class="fa fa-spin fa-spinner"></i>',playerModal:'<i class="icons icon-control-play"></i>',fullScreen:'<i class="icons icon-size-fullscreen"></i>',actualScreen:'<i class="icons icon-size-actual"></i>',largeScreen:'<i class="icons icon-frame"></i>',smallScreen:'<i class="icons icon-frame"></i>',pause:'<i class="icons icon-control-pause"></i>',play:'<i class="icons icon-control-play"></i>',volumeMute:'<i class="icons icon-volume-off"></i>',volume1:'<i class="icons icon-volume-1"></i>',volume2:'<i class="icons icon-volume-2"></i>',volume3:'<i class="icons icon-volume-3"></i>',close:'[X]'},volume:100,view:{content:null,import:null},sources:{},logo:{height:'10%',rate:1},size:{width:'100%',rate:2/3},largeScreen:!1,locale:'en',menu:{},poster:null,schedules:[],type:'video',plugins:{},startAt:0};__dp.translateData={en:{menu:{loop:'Loop this video',copy_url:'Copy video\'s url'},app:{loading:'Loading...',not_support:'This browser not support player'}},vi:{menu:{loop:'Lặp video này',copy_url:'Copy đường dẫn video'},app:{loading:'Đang tải...',not_support:'Trình duyệt không hỗ trợ player'}}};class DPBase{or(value,or){return value===undefined?or:value}}
class DPNode extends DPBase{constructor(selector){super();this.setSelector(selector)}
convertToArray(selector){if(selector instanceof NodeList){for(var a=[],l=selector.length;l--;a[l]=selector[l]);selector=a}else if(typeof selector!=='string'&&!(selector instanceof Array)){selector=[selector]}
return selector}
setSelector(selector){this.selectors=this.convertToArray(selector);return this}
nodes(){if(typeof this.selectors==='string'){let nodes=document.querySelectorAll(this.selectors);return this.convertToArray(nodes)}
return this.selectors}
node(){if(typeof this.selectors==='string'){return document.querySelector(this.selectors)}
return this.selectors[0]}
find(selector){let children=this.node().querySelectorAll(selector);children=this.convertToArray(children);return new DPNode(children)}
height(value){if(value===undefined){let node=this.node();return node.getBoundingClientRect!==undefined?node.getBoundingClientRect().height:(function(){var myHeight=0;if(typeof(window.innerWidth)=='number'){myHeight=window.innerHeight}else if(document.documentElement&&document.documentElement.clientHeight){myHeight=document.documentElement.clientHeight}else if(document.body&&document.body.clientHeight){myHeight=document.body.clientHeight}
return myHeight})()}
this.node().style.height=value;return this}
width(value){if(value===undefined){let node=this.node();return node.getBoundingClientRect!==undefined?node.getBoundingClientRect().width:(function(){var myWidth=0;if(typeof(window.innerWidth)=='number'){myWidth=window.innerWidth}else if(document.documentElement&&document.documentElement.clientWidth){myWidth=document.documentElement.clientWidth}else if(document.body&&document.body.clientWidth){myWidth=document.body.clientWidth}
return myWidth})()}
this.node().style.width=value;return this}
addClass(name){let selectors=this.nodes();for(var i=0;i<selectors.length;++i){selectors[i].classList.add(name)}
return this}
removeClass(name){let selectors=this.nodes();for(var i=0;i<selectors.length;++i){if(selectors[i].classList.contains(name)){selectors[i].classList.remove(name)}}
return this}
css(key,value){if(typeof key==='string'&&value===undefined){return this.node().style[key]}
let selectors=this.nodes();let values={};if(typeof key==='string'){values[key]=value}else{values=key}
for(let i=0;i<selectors.length;i++){for(let vKey in values){selectors[i].style[vKey]=values[vKey]}}
return this}
attr(key,value){if(typeof key==="string"&&value===undefined){return this.node().getAttribute(key)}
let selectors=this.nodes();let values=[];if(typeof key==='string'){let val={};val[key]=value;values.push(val)}else{values=key}
for(let i=0;i<selectors.length;i++){for(let vKey in values){selectors[i].setAttribute(vKey,values[vKey])}}}
html(value){if(value===undefined){return this.node().innerHTML}
let selectors=this.nodes();for(let i=0;i<selectors.length;i++){selectors[i].innerHTML=value}
return this}
hasClass(name){return this.node().classList.contains(name)}
active(status){let selectors=this.nodes();for(let i=0;i<selectors.length;i++){if(status){selectors[i].classList.add('active')}else if(selectors[i].classList.contains('active')){selectors[i].classList.remove('active')}}
return this}
isActive(){return this.hasClass('active')}
listen(key,call){let keys=key.trim().replace(' ',',').split(',');let selectors=this.nodes();for(let i=0;i<selectors.length;i++){for(let j=0;j<keys.length;j++){selectors[i].addEventListener(keys[j],call)}}
return this}
val(value){if(value===undefined){return this.node().value}
let selectors=this.nodes();for(let i=0;i<selectors.length;i++){selectors[i].value=value}
return this}
offset(){let bound=this.node().getBoundingClientRect();return{left:bound.left,top:bound.top,right:bound.right,bottom:bound.bottom}}
has(selector){return this.node().contains(selector)}
is(selector){return this.node().isSameNode(selector)}
closest(selector){return new DPNode(this.node().closest(selector))}
append(node){let selectors=this.nodes();for(let i=0;i<selectors.length;i++){selectors[i].appendChild(node)}
return this}
text(value){if(value===undefined){return this.node().textContent}
let selectors=this.nodes();for(let i=0;i<selectors.length;i++){selectors[i].textContent=value}
return this}}
class DPConfig extends DPBase{constructor(config){super();config.logo=this.or(config.logo,{});config.size=this.or(config.size,{});this.config={elements:this.mergeElements(config),icons:this.mergeIcons(config),volume:this.or(config.volume,__dp.defaultConfig.volume),view:this.mergeView(config),sources:this.or(config.sources,__dp.defaultConfig.sources),logo:this.mergeLogo(config),size:this.mergeSize(config),largeScreen:this.or(config.largeScreen,__dp.defaultConfig.largeScreen),locale:this.or(config.locale,__dp.defaultConfig.locale),menu:this.mergeMenu(config),poster:this.or(config.poster,__dp.defaultConfig.poster),schedules:this.mergeSchedules(config),type:this.or(config.type,__dp.defaultConfig.type),plugins:this.mergePlugins(config),startAt:this.or(config.startAt,__dp.defaultConfig.startAt)};this.cache={dom:{},config:{}}}
mergeMenu(config){if(config.menu===!1){return!1}
let rs=this.or(config.menu,__dp.defaultConfig.menu);rs.loop=this.or(rs.loop,{text:'menu.loop',element:'menuItemLoop',execute:function(item,menu,config){menu.execLoop(item,config)}});rs.copyUrl=this.or(rs.copyUrl,{text:'menu.copy_url',element:'menuItemCopyUrl',execute:function(item,menu,config){menu.execCopyUrl(item,config)}});return rs}
mergeElements(config){config.elements=this.or(config.elements,{});return{object:this.or(config.elements.object,__dp.defaultConfig.elements.object),container:this.or(config.elements.container,__dp.defaultConfig.elements.container),video:this.or(config.elements.video,__dp.defaultConfig.elements.video),audio:this.or(config.elements.audio,__dp.defaultConfig.elements.audio),logo:this.or(config.elements.logo,__dp.defaultConfig.elements.logo),progress:this.or(config.elements.progress,__dp.defaultConfig.elements.progress),progressLoading:this.or(config.elements.progressLoading,__dp.defaultConfig.elements.progressLoading),progressPlaying:this.or(config.elements.progressPlaying,__dp.defaultConfig.elements.progressPlaying),progressHoverTooltipText:this.or(config.elements.progressHoverTooltipText,__dp.defaultConfig.elements.progressHoverTooltipText),progressHoverTooltipImage:this.or(config.elements.progressHoverTooltipImage,__dp.defaultConfig.elements.progressHoverTooltipImage),control:this.or(config.elements.control,__dp.defaultConfig.elements.control),button:this.or(config.elements.button,__dp.defaultConfig.elements.button),controlPlayPause:this.or(config.elements.controlPlayPause,__dp.defaultConfig.elements.controlPlayPause),controlFullScreen:this.or(config.elements.controlFullScreen,__dp.defaultConfig.elements.controlFullScreen),controlLargeScreen:this.or(config.elements.controlLargeScreen,__dp.defaultConfig.elements.controlLargeScreen),controlVolume:this.or(config.elements.controlVolume,__dp.defaultConfig.elements.controlVolume),controlVolumeTooltip:this.or(config.elements.controlVolumeTooltip,__dp.defaultConfig.elements.controlVolumeTooltip),controlVolumeRange:this.or(config.elements.controlVolumeRange,__dp.defaultConfig.elements.controlVolumeRange),controlTimer:this.or(config.elements.controlTimer,__dp.defaultConfig.elements.controlTimer),modal:this.or(config.elements.modal,__dp.defaultConfig.elements.modal),loaderModal:this.or(config.elements.loaderModal,__dp.defaultConfig.elements.loaderModal),loaderModalIcon:this.or(config.elements.loaderModalIcon,__dp.defaultConfig.elements.loaderModalIcon),playerModal:this.or(config.elements.playerModal,__dp.defaultConfig.elements.playerModal),playerModalIcon:this.or(config.elements.playerModalIcon,__dp.defaultConfig.elements.playerModalIcon),menu:this.or(config.elements.menu,__dp.defaultConfig.elements.menu),menuList:this.or(config.elements.menuList,__dp.defaultConfig.elements.menuList),menuItem:this.or(config.elements.menuItem,__dp.defaultConfig.elements.menuItem),menuItemLoop:this.or(config.elements.menuItemLoop,__dp.defaultConfig.elements.menuItemLoop),menuItemCopyUrl:this.or(config.elements.menuItemCopyUrl,__dp.defaultConfig.elements.menuItemCopyUrl),ads:this.or(config.elements.ads,__dp.defaultConfig.elements.ads),adsItem:this.or(config.elements.adsItem,__dp.defaultConfig.elements.adsItem),adsContent:this.or(config.elements.adsContent,__dp.defaultConfig.elements.adsContent),adsClose:this.or(config.elements.adsClose,__dp.defaultConfig.elements.adsClose),}}
mergeIcons(config){config.icons=this.or(config.icons,{});return{loaderModal:this.or(config.icons.loaderModal,__dp.defaultConfig.icons.loaderModal),playerModal:this.or(config.icons.loaderModal,__dp.defaultConfig.icons.playerModal),fullScreen:this.or(config.icons.fullScreen,__dp.defaultConfig.icons.fullScreen),actualScreen:this.or(config.icons.actualScreen,__dp.defaultConfig.icons.actualScreen),largeScreen:this.or(config.icons.largeScreen,__dp.defaultConfig.icons.largeScreen),smallScreen:this.or(config.icons.smallScreen,__dp.defaultConfig.icons.smallScreen),pause:this.or(config.icons.pause,__dp.defaultConfig.icons.pause),play:this.or(config.icons.play,__dp.defaultConfig.icons.play),volumeMute:this.or(config.icons.volumeMute,__dp.defaultConfig.icons.volumeMute),volume1:this.or(config.icons.volume1,__dp.defaultConfig.icons.volume1),volume2:this.or(config.icons.volume2,__dp.defaultConfig.icons.volume2),volume3:this.or(config.icons.volume3,__dp.defaultConfig.icons.volume3),close:this.or(config.icons.close,__dp.defaultConfig.icons.close)}}
mergeLogo(config){if(config.logo===!1){return config.logo}
config.logo=this.or(config.logo,{});let rs={};if(config.logo.height!==undefined){rs.height=config.logo.height;if(config.logo.width!==undefined){rs.width=config.logo.width}else{rs.rate=this.or(config.logo.rate,__dp.defaultConfig.logo.rate)}}else if(config.logo.width!==undefined){rs.width=config.logo.width;if(config.logo.height!==undefined){rs.height=config.logo.height}else{rs.rate=this.or(config.logo.rate,__dp.defaultConfig.logo.rate)}}else{rs.height=__dp.defaultConfig.logo.height;rs.rate=__dp.defaultConfig.logo.rate}
rs.url=this.or(config.logo.url,null);return rs}
mergeSize(config){config.size=this.or(config.size,{});let rs={};if(config.size.height!==undefined){rs.height=config.size.height;if(config.size.width!==undefined){rs.width=config.size.width}else{rs.rate=this.or(config.size.rate,__dp.defaultConfig.size.rate)}}else if(config.size.width!==undefined){rs.width=config.size.width;if(config.size.height!==undefined){rs.height=config.size.height}else{rs.rate=this.or(config.size.rate,__dp.defaultConfig.size.rate)}}else{rs.width=__dp.defaultConfig.size.width;rs.rate=__dp.defaultConfig.size.rate}
return rs}
mergeView(config){if(config.view==!1||config.view==undefined){config.view={}}
return{content:this.or(config.view.content,__dp.defaultConfig.view.content),import:this.or(config.view.import,__dp.defaultConfig.view.import)}}
mergeSchedules(config){if(!config.schedules){return[]}
let rs=this.or(config.schedules,__dp.defaultConfig.schedules);return rs}
mergePlugins(config){return this.or(config.plugins,__dp.defaultConfig.plugins)}
get(key,dom,cache){let config=null;cache=cache!==undefined?cache:!0;if(this.cache.config[key]!==undefined&&cache){config=this.cache.config[key]}
else{var keys=key.split('.');config=this.config;for(var i in keys){if(config[keys[i]]==undefined){config=undefined;break}
config=config[keys[i]]}
this.cache.config[key]=config}
if(dom===!0){if(key==='elements.object'&&(this.cache.dom[key]===undefined||!cache)){this.cache.dom[key]=new DPNode(config);return this.cache.dom[key]}
else if(typeof config==='string'){if(this.cache.dom[key]===undefined||!cache){this.cache.dom[key]=this.cache.dom['elements.object'].find(config)}
return this.cache.dom[key]}}
return config}
runner(isDom,cache){let type=this.get('type');return this.get('elements.'+type,isDom,cache)}}
class DPEvent extends DPBase{constructor(app){super();this.app=app}
init(){this.events={};this.viewEvents().logoEvents().menuEvents().controlEvents().screenEvents().modalEvents().sourceEvents()}
viewEvents(){let instance=this;this.events['dp.view.rendering']=function(parameters){return instance.createEvent('dp.view.rendering',parameters)};this.events['dp.view.rendered']=function(parameters){return instance.createEvent('dp.view.rendered',parameters)};return this}
logoEvents(){let instance=this;this.events['dp.logo.resize']=function(parameters){return instance.createEvent('dp.logo.resize',parameters)};return this}
menuEvents(){let instance=this;this.events['dp.menu.open']=function(parameters){return instance.createEvent('dp.menu.open',parameters)};this.events['dp.menu.close']=function(parameters){return instance.createEvent('dp.menu.close',parameters)};return this}
controlEvents(){let instance=this;this.events['dp.control.show']=function(parameters){return instance.createEvent('dp.control.show',parameters)};this.events['dp.control.hide']=function(parameters){return instance.createEvent('dp.control.hide',parameters)};return this}
modalEvents(){let instance=this;this.events['dp.modal.loader.show']=function(parameters){return instance.createEvent('dp.modal.loader.show',parameters)};this.events['dp.modal.loader.hide']=function(parameters){return instance.createEvent('dp.modal.loader.hide',parameters)};this.events['dp.modal.player.show']=function(parameters){return instance.createEvent('dp.modal.player.show',parameters)};this.events['dp.modal.player.hide']=function(parameters){return instance.createEvent('dp.modal.player.hide',parameters)};return this}
screenEvents(){let instance=this;this.events['dp.screen.large.active']=function(parameters){return[instance.createEvent('dp.screen.large.change',parameters),instance.createEvent('dp.screen.large.active',parameters)]};this.events['dp.screen.large.inactive']=function(parameters){return[instance.createEvent('dp.screen.large.change',parameters),instance.createEvent('dp.screen.large.inactive',parameters)]};this.events['dp.screen.full.active']=function(parameters){return[instance.createEvent('dp.screen.full.change',parameters),instance.createEvent('dp.screen.full.active',parameters)]};this.events['dp.screen.full.inactive']=function(parameters){return[instance.createEvent('dp.screen.full.change',parameters),instance.createEvent('dp.screen.full.inactive',parameters)]};this.events['dp.screen.change']=function(parameters){return instance.createEvent('dp.screen.change',parameters)};return this}
sourceEvents(){let instance=this;this.events['dp.source.play']=function(parameters){return instance.createEvent('dp.source.play',parameters)};this.events['dp.source.pause']=function(parameters){return instance.createEvent('dp.source.pause',parameters)};this.events['dp.source.ended']=function(parameters){return instance.createEvent('dp.source.ended',parameters)};return this}
createEvent(name,parameters){return new CustomEvent(name,parameters)}
trigger(name,parameters){let events=null;if(this.events[name]!==undefined){events=this.events[name](this.or(parameters,{}))}else{events=this.createEvent(name,this.or(parameters,{}))}
let ob=this.app.config.get('elements.object',!0);let dom=ob.node();if(events instanceof Array){events.forEach(function(item,index){dom.dispatchEvent(item)})}else{dom.dispatchEvent(events)}
return this}
listen(name,call){let ob=this.app.config.get('elements.object',!0);let dom=ob.node();dom.addEventListener(name,call);return this}}
class DPView extends DPBase{constructor(app){super();this.app=app}
init(){return this}
async render(){let elObject=this.app.config.get('elements.object',!0);let viewConfig=this.app.config.get('view',!1);let posterUrl=this.app.config.get('poster',!1);let sizeConfig=this.app.config.get('size',!1);this.app.event.trigger('dp.view.rendering');elObject.css({maxWidth:'100%'});if(sizeConfig.height!==undefined){elObject.css({height:sizeConfig.height});if(sizeConfig.width!==undefined){elObject.css({width:sizeConfig.width})}else{elObject.css({width:(elObject.height()/sizeConfig.rate)+'px'})}}else{elObject.css({width:sizeConfig.width});if(sizeConfig.height!==undefined){elObject.css({height:sizeConfig.height})}else{elObject.css({height:(elObject.width()*sizeConfig.rate)+'px'})}}
if(!viewConfig.content){if(viewConfig.import){elObject.html(this.app.translate.get('app.loading'));let response=await this.loadTemplate();let content=this.replace(response);elObject.html(content)}}else{let content=this.replace(viewConfig.content);elObject.html(content)}
if(this.poster){let runner=this.app.config.runner(!0);runner.node().poster=posterUrl}
this.app.event.trigger('dp.view.rendered');return!0}
async loadTemplate(){let viewConfig=this.app.config.get('view',!1);return new Promise(function(resolve,reject){let xhr=new XMLHttpRequest();xhr.open('GET',viewConfig.import);xhr.onload=function(){if(this.status>=200&&this.status<300){resolve(xhr.response)}else{reject({status:this.status,statusText:xhr.statusText})}};xhr.onerror=function(){reject({status:this.status,statusText:xhr.statusText})};xhr.send()})}
replace(content){return content}}
class DPTranslator extends DPBase{constructor(app){super();this.app=app;let locale=this.app.config.get('locale');this.languages=this.or(__dp.translateData[locale],{})}
get(key,attributes){if(attributes==undefined){attributes={}}
var keys=key.split('.');var messages=this.languages;let message=messages;for(var i in keys){if(message[keys[i]]==undefined){return key}
message=message[keys[i]]}
for(var attrKey in attributes){if(messages[keys[0]].attributes==undefined){return message}
if(messages[keys[0]].attributes[attrKey]==undefined){return message}
var fields=messages[keys[0]].attributes[attrKey];var attr=(fields[attributes[attrKey]]!=undefined?fields[attributes[attrKey]]:attributes[attrKey]);var regex=new RegExp(':'+attrKey,'g');message=message.replace(regex,attr)}
return message}}
class DPMenu extends DPBase{constructor(app){super();this.app=app}
init(){this.status=!0;let menuList=this.app.config.get('menu',!1);let elMenuList=this.app.config.get('elements.menuList',!0);if(menuList===!1){this.status=!1;return this}
let menuItemClass=this.app.config.get('elements.menuItem',!1).replace('.','');for(var name in menuList){let div=document.createElement('div');div.classList.add(menuItemClass);div.setAttribute('dp-menu:name',name);div.innerHTML=this.app.translate.get(menuList[name].text);elMenuList.append(div)}
this.events();return this}
openMenu(event){if(!this.status){return this}
let elMenu=this.app.config.get('elements.menu',!0);let elMenuList=this.app.config.get('elements.menuList',!0);elMenu.active(!0);let height=elMenuList.height();let width=elMenuList.width();let cheight=window.innerHeight;let cwidth=window.innerWidth;let left=event.pageX;let top=event.pageY;if((cheight-top)<height){top=cheight-height}
if((cwidth-left)<width){left=cwidth-width}
elMenuList.css({left:left+'px',top:top+'px'});this.app.event.trigger('dp.menu.open');return this}
closeMenu(){let elMenu=this.app.config.get('elements.menu',!0);if(!this.status){return this}
elMenu.active(!1);this.app.event.trigger('dp.menu.close');return this}
events(){let instance=this;let elMenuList=this.app.config.get('elements.menuList',!0);let elMenuItem=this.app.config.get('elements.menuItem',!0);let elContainer=this.app.config.get('elements.container',!0);elContainer.listen('contextmenu',function(e){if(instance.status){instance.openMenu(event)}
e.preventDefault()});__dp.node(window).listen('click',function(event){if(!elMenuList.has(event.target)&&!elMenuList.is(event.target)){instance.closeMenu()}});elMenuItem.listen('click',function(){let name=elMenuItem.attr('dp-menu:name');instance.execute(this,name)});return this}
execute(item,name){if(!this.status){return this}
let config=this.app.config.get('menu.'+name);if(config.execute!==undefined){config.execute(item,this,config)}
return this}
execLoop(item,config){if(!this.status){return this}
let elRunner=this.app.config.runner(!0);let runner=elRunner.node();if(runner.loop){runner.loop=!1;__dp.node(item).active(!1)}else{runner.loop=!0;__dp.node(item).active(!0)}
this.closeMenu();return this}
execCopyUrl(item,config){if(!this.status){return this}
let elRunner=this.app.config.runner(!0);let runner=elRunner.node();this.closeMenu();return this}}
class DPLogo extends DPBase{constructor(app){super();this.app=app}
resize(){if(!this.status){return this}
let elLogo=this.app.config.get('elements.logo',!0);let logoConfig=this.app.config.get('logo',!1);if(logoConfig.height!==undefined){elLogo.css({height:logoConfig.height});if(logoConfig.width!==undefined){elLogo.css({width:logoConfig.width})}else{elLogo.css({width:(elLogo.height()/logoConfig.rate)+'px'})}}else{elLogo.css({width:logoConfig.width});if(logoConfig.height!==undefined){elLogo.css({height:logoConfig.height})}else{elLogo.css({height:(elLogo.width()*logoConfig.rate)+'px'})}}
this.app.event.trigger('dp.logo.resize');return this}
init(){this.status=!0;let elLogo=this.app.config.get('elements.logo',!0);let logoConfig=this.app.config.get('logo',!1);let instance=this;if(logoConfig===!1){this.status=!1;elLogo.active(!1);return this}
elLogo.active(!0);elLogo.css({backgroundImage:'url(\''+logoConfig.url+'\')'});this.app.event.listen('dp.screen.change',function(){instance.resize()});instance.resize();return this}}
class DPModal extends DPBase{constructor(app){super();this.app=app}
init(){let icons=this.app.config.get('icons',!1);let elLoaderIcon=this.app.config.get('elements.loaderModalIcon',!0);let elPlayerIcon=this.app.config.get('elements.playerModalIcon',!0);elPlayerIcon.html(icons.playerModal);elLoaderIcon.html(icons.loaderModal);return this}
toggle(config){let elLoaderModal=this.app.config.get('elements.loaderModal',!0);let elPlayerModal=this.app.config.get('elements.playerModal',!0);let elModal=this.app.config.get('elements.modal',!0);let elRunner=this.app.config.runner(!0);let runnerDom=elRunner.node();let isLoaderActive=elLoaderModal.isActive();let isPlayerActive=elPlayerModal.isActive();elModal.active(!1);if(config===undefined){if(!isNaN(runnerDom.duration)){if(runnerDom.paused){elPlayerModal.active(!0)}else{elPlayerModal.active(!1)}}else{elLoaderModal.active(!0)}}else{if(config.loader===!0){elLoaderModal.active(!0)}else if(config.player===!0||runnerDom.paused){elPlayerModal.active(!0)}}
if(elLoaderModal.isActive()!==isLoaderActive){!isLoaderActive?this.app.event.trigger('dp.modal.loader.show'):this.app.event.trigger('dp.modal.loader.hide')}
if(elPlayerModal.isActive()!==isPlayerActive){!isPlayerActive?this.app.event.trigger('dp.modal.player.show'):this.app.event.trigger('dp.modal.player.hide')}
return this}}
class DPControl extends DPBase{constructor(app){super();this.app=app}
init(){this.isMouseIn=!1;this.controlTime=null;let elRunner=this.app.config.runner(!0);let instance=this;let runnerDom=elRunner.node();__dp.node(this.app.config.get('elements.container',!1)+','+this.app.config.get('elements.control',!1)+','+this.app.config.runner()).listen('mousemove',function(){instance.openControl();instance.isMouseIn=!0});__dp.node(window).listen('scroll',function(){instance.openControl()});__dp.node(this.app.config.get('elements.container',!1)+','+this.app.config.get('elements.control',!1)+','+this.app.config.runner()).listen('mouseleave',function(){instance.closeControl();instance.isMouseIn=!1});elRunner.listen('pause ended',function(){instance.openControl()});elRunner.listen('play',function(){if(!instance.isMouseIn){instance.closeControl()}});runnerDom.controls=!1;return this}
closeControl(){let elRunner=this.app.config.runner(!0);let elControl=this.app.config.get('elements.control',!0);let elContainer=this.app.config.get('elements.container',!0);let runner=elRunner.node();if(!runner.paused){elControl.active(!1);this.app.event.trigger('dp.control.hide');if(this.isMouseIn){elContainer.addClass('hidden-cursor')}else{elContainer.removeClass('hidden-cursor')}}}
openControl(){let instance=this;let elControl=this.app.config.get('elements.control',!0);let elContainer=this.app.config.get('elements.container',!0);window.clearTimeout(this.controlTime);elControl.active(!0);elContainer.removeClass('hidden-cursor');this.app.event.trigger('dp.control.show');this.controlTime=window.setTimeout(function(){instance.closeControl()},2000)}}
class DPScreen extends DPBase{constructor(app){super();this.app=app}
defaultScreen(){let sizeConfig=this.app.config.get('size',!1);let elObject=this.app.config.get('elements.object',!0);if(sizeConfig.height!==undefined){elObject.css({height:sizeConfig.height});if(sizeConfig.width!==undefined){elObject.css({width:sizeConfig.width})}else{elObject.css({width:(elObject.height()/sizeConfig.rate)+'px'})}}else{elObject.css({width:sizeConfig.width});if(sizeConfig.height!==undefined){elObject.css({height:sizeConfig.height})}else{elObject.css({height:(elObject.width()*sizeConfig.rate)+'px'})}}
if(!this.defaultSize){this.defaultSize={width:elObject.width(),height:elObject.height()}}
elObject.css({maxWidth:'100%'});this.rateScreenSize();return this}
rateScreenSize(){let elObject=this.app.config.get('elements.object',!0);let runnerSize=0;let h=0;if(this.isLarge){runnerSize=__dp.node(window).width();elObject.css({width:runnerSize+'px'})
h=(runnerSize*this.defaultSize.height/this.defaultSize.width);let windowH=__dp.node(window).height()*85/100;if(h>windowH){h=windowH}}else{runnerSize=elObject.width();h=(runnerSize*this.defaultSize.height/this.defaultSize.width)}
elObject.css({height:h+'px'});this.app.event.trigger('dp.screen.change');return this}
makeIconForFullScreen(isFull){let icons=this.app.config.get('icons',!1);let elBtnFullScreen=this.app.config.get('elements.controlFullScreen',!0);if(isFull===undefined){isFull=document.fullscreenElement||document.mozFullScreenElement||document.webkitFullscreenElement}
if(isFull){elBtnFullScreen.html(icons.actualScreen)}else{elBtnFullScreen.html(icons.fullScreen)}
return this}
toggleFullScreen(){let elContainer=this.app.config.get('elements.container',!0);let isFullScreen=document.webkitIsFullScreen||document.mozFullScreen||!1;let container=elContainer.node();let instance=this;container.requestFullScreen=container.requestFullScreen||container.webkitRequestFullScreen||container.mozRequestFullScreen||function(){return!1};document.cancelFullScreen=document.cancelFullScreen||document.webkitCancelFullScreen||document.mozCancelFullScreen||function(){return!1};isFullScreen?(function(){instance.app.event.trigger('dp.screen.full.inactive');document.cancelFullScreen()})():(function(){instance.app.event.trigger('dp.screen.full.active');container.requestFullScreen()})();return this}
makeIconForLargeScreen(isLg){let icons=this.app.config.get('icons',!1);let elBtnLargeScreen=this.app.config.get('elements.controlLargeScreen',!0);if(isLg===undefined){isLg=this.isLarge}
if(isLg){elBtnLargeScreen.html(icons.smallScreen)}else{elBtnLargeScreen.html(icons.largeScreen)}
return this}
toggleLargeScreen(){if(this.isLarge){this.isLarge=!1;this.app.event.trigger('dp.screen.large.inactive');this.defaultScreen()}else{this.isLarge=!0;this.app.event.trigger('dp.screen.large.active');this.rateScreenSize()}
return this}
init(){this.isLarge=!1;this.defaultSize=null;let elBtnFullScreen=this.app.config.get('elements.controlFullScreen',!0);let elBtnLargeScreen=this.app.config.get('elements.controlLargeScreen',!0);let largeScreen=this.app.config.get('largeScreen');let instance=this;elBtnFullScreen.listen('click',function(event){instance.toggleFullScreen()});elBtnLargeScreen.listen('click',function(event){instance.toggleLargeScreen();instance.makeIconForLargeScreen()});__dp.node(document).listen("fullscreenchange webkitfullscreenchange mozfullscreenchange",function(){instance.makeIconForFullScreen()});__dp.node(window).listen('resize',function(){instance.rateScreenSize()});this.defaultScreen();this.makeIconForFullScreen(!1);if(largeScreen){instance.toggleLargeScreen()}
this.makeIconForLargeScreen();return this}}
class DPSchedule extends DPBase{constructor(app){super();this.app=app}
init(){this.helper=this.app.helper;this.schedules={};this.alias={};this.lastTime=null;let schedules=this.app.config.get('schedules');let instance=this;let runner=this.app.config.runner(!0);let runnerDom=runner.node();for(var i in schedules){if(this.schedules[schedules[i].at]===undefined){this.schedules[schedules[i].at]=[]}
schedules[i].name=schedules[i].name||Math.random().toString(36).substring(10);this.alias[schedules[i].name]=schedules[i];this.schedules[schedules[i].at].push(schedules[i])}
runner.listen('timeupdate ',function(e){let current=runnerDom.currentTime;let time=__dp.parseTime(current);if(this.lastTime===time){return}
this.lastTime=time;let list=instance.or(instance.schedules[time],[]);for(let i in list){instance.execute(list[i].name);if(list[i].loop!==!0){delete instance.schedules[time][i]}}})}
execute(name){let schedule=this.alias[name];schedule.execute(this.app)}}
class DPPlugin extends DPBase{constructor(app){super();this.app=app}
async init(){let list=this.app.config.get('plugins');for(let name in list){this.app[name]=await eval('new '+list[name].className+'(this.app)');this.app[name].init()}
return this}}
class DPSource extends DPBase{constructor(app){super();this.app=app}
load(sources){if(this.app.rendered&&sources!==undefined){let runner=this.app.config.runner(!0);runner.html(this.app.translate.get('app.not_support'));if(typeof sources==='string'){runner.node().src=sources}else if(sources.length==1){runner.node().src=sources[0].src}else{for(var i in sources){let source=document.createElement('source');__dp.node(source).attr({src:sources[i].src,type:sources[i].type});runner.append(source)}}
runner.node().load()}
return this}
play(){if(this.app.rendered){let runner=this.app.config.runner(!0).node();runner.play()}
return this}
pause(){if(this.app.rendered){let runner=this.app.config.runner(!0).node();runner.pause()}
return this}
to(time){let runner=this.app.config.runner(!0).node();if(isNaN(time)){time=time.split(':');if(time.length===3){time=time[2]*1+time[1]*60+time[0]*3600}else if(time.length===2){time=time[1]*1+time[0]*60}else{time=time[0]*1}}
runner.currentTime=time;return this}
init(){let sources=this.app.config.get('sources');let runner=this.app.config.runner(!0);let event=this.app.event;let startAt=this.app.config.get('startAt');this.load(sources);runner.listen('play',function(){event.trigger('dp.source.play')});runner.listen('pause',function(){event.trigger('dp.source.pause')});runner.listen('ended',function(){event.trigger('dp.source.ended')});this.to(startAt);return this}}
class DilationPlayer extends DPBase{constructor(object,config){super();if(config==undefined){config={}}
config.elements=this.or(config.elements,{});config.elements.object=object;this.rendered=!1;this.config=new DPConfig(config);this.event=new DPEvent(this);this.contextEvent();this.translate=new DPTranslator(this);this.view=new DPView(this);this.source=new DPSource(this);this.control=new DPControl(this);this.screen=new DPScreen(this);this.menu=new DPMenu(this);this.logo=new DPLogo(this);this.modal=new DPModal(this);this.plugin=new DPPlugin(this);this.schedule=new DPSchedule(this);this.apply()}
async apply(){await this.render();this.contextSource().contextModal().contextLogo().contextControl().contextScreen().playPause().progress().sound().contextMenu().contextPlugin().contextSchedule()}
async render(){let rendered=await this.view.init().render();this.rendered=rendered;return rendered}
playPause(){let runner=this.config.runner(!0);let player=this.config.get('elements.playerModal',!0);let btn=this.config.get('elements.controlPlayPause',!0);let icons=this.config.get('icons');let runnerDom=runner.node();let instance=this;let helper={toggle:function(){if(!isNaN(runnerDom.duration)){if(runnerDom.paused){runnerDom.play()}else{runnerDom.pause()}}},makeIcon:function(){if(runnerDom.paused){btn.html(icons.play)}else{btn.html(icons.pause)}
instance.modal.toggle()}};btn.listen('click',function(){helper.toggle()});player.listen('click',function(){helper.toggle()});runner.listen('click',function(){helper.toggle()});runner.listen('play',function(){helper.makeIcon()});runner.listen('pause ended',function(){helper.makeIcon()});helper.makeIcon();return this}
progress(){let instance=this;let runner=this.config.runner(!0);let runnerDom=runner.node();let progressBar=this.config.get('elements.progress',!0);let playing=this.config.get('elements.progressPlaying',!0);let timer=this.config.get('elements.controlTimer',!0);let progressTimerTooltipText=this.config.get('elements.progressHoverTooltipText',!0);let progressTimerTooltipImage=this.config.get('elements.progressHoverTooltipImage',!0);let tooltipCanvas=progressTimerTooltipImage.find('canvas').node();tooltipCanvas.width=90;tooltipCanvas.height=70;let runnerPreview=document.createElement('video');runnerPreview.load();let helper={setLoaded:function(current,duration){playing.width((current/duration*100)+'%')},setTimer:function(current,duration){current=__dp.parseTime(current);duration=__dp.parseTime(duration);timer.html(current+' / '+duration)},display:function(){if(!isNaN(runnerDom.duration)){let current=runnerDom.currentTime;let duration=runnerDom.duration;helper.setLoaded(current,duration);helper.setTimer(current,duration)}}};runner.listen('timeupdate ',function(e){helper.display();instance.modal.toggle({loader:!1})});progressBar.listen("click",function(e){if(!isNaN(runnerDom.duration)){let offset=__dp.node(this).offset();let left=(e.pageX-offset.left);let totalWidth=progressBar.width();let percentage=(left/totalWidth);let vidTime=runnerDom.duration*percentage;instance.source.to(vidTime);helper.setLoaded(left,totalWidth);instance.modal.toggle({loader:!0})}});progressBar.listen("mousemove",function(e){if(!isNaN(runnerDom.duration)){progressTimerTooltipText.active(!0);progressTimerTooltipImage.active(!0);let offset=__dp.node(this).offset();let left=(e.pageX-offset.left);let totalWidth=progressBar.width();let percentage=(left/totalWidth);let current=runnerDom.duration*percentage;let parseTime=__dp.parseTime(current);progressTimerTooltipText.css('left',left+'px').text(parseTime);let width=progressTimerTooltipImage.width()/2;let ileft=left;if(left>(totalWidth-width)){ileft=totalWidth-width}else if(left<width){ileft=width}
progressTimerTooltipImage.css('left',ileft+'px');width=progressTimerTooltipText.width()/2;let tleft=left;if(left>(totalWidth-width-2)){tleft=totalWidth-width-2}else if(left<(width+2)){tleft=width+2}
progressTimerTooltipText.css('left',tleft+'px')}else{progressTimerTooltipText.active(!1);progressTimerTooltipImage.active(!1)}});runner.listen('loadeddata',function(e){helper.display();instance.modal.toggle({loader:!1})});runner.listen('loadstart',function(e){instance.modal.toggle({loader:!0})});return this}
sound(){let runner=this.config.runner(!0);let runnerDom=runner.node();let volume=this.config.get('elements.controlVolume',!0);let volumeRange=this.config.get('elements.controlVolumeRange',!0);let range=this.config.get('volume');let icons=this.config.get('icons');let instance=this;let helper={makeIcon:function(){if(runnerDom.muted==!0||runnerDom.volume==0){volume.html(icons.volumeMute)}else if(runnerDom.volume<=0.5){volume.html(icons.volume1)}else{volume.html(icons.volume2)}},setVolume:function(number){runnerDom.volume=number/100;if(runnerDom.volume>0){runnerDom.muted=!1}},toggleMute:function(){if(runnerDom.muted==!0){runnerDom.muted=!1}else if(runnerDom.volume>0){runnerDom.muted=!0}}};volume.listen('click',function(){helper.toggleMute()});volumeRange.listen('change',function(){let range=__dp.node(this).val();helper.setVolume(range)});runner.listen('volumechange',function(){helper.makeIcon()});helper.setVolume(range);volumeRange.val(range);helper.makeIcon();return this}
contextLogo(){this.logo.init();return this}
contextControl(){this.control.init();return this}
contextModal(){this.modal.init();return this}
contextMenu(){this.menu.init();return this}
contextSchedule(){this.schedule.init();return this}
contextPlugin(){this.plugin.init();return this}
contextEvent(){this.event.init();return this}
contextScreen(){this.screen.init();return this}
contextSource(){this.source.init();return this}}